#!/bin/bash

url="http://www.moongiant.com/phase/today"
pattern="Illumination:"
phase="$( curl -s "$url" | grep "$pattern" | tr ',' '\
' | grep "$pattern" | sed 's/[^0-9]//g')"

doWaxWane=true
phaseGroup=0
isWaning=false

if [ $phase -lt 5 ] ; then
 phasename="New Moon"
 phaseGroup=0
elif [ $phase -lt 45 ] ; then
 phasename="Crescent"
 doWaxWane=true
 phaseGroup=1
elif [ $phase -lt 55 ] ; then
 phasename="Quarter"
 doWaxWane=true
 phaseGroup=2
elif [ $phase -lt 95 ] ; then
 phasename="Gibbous"
 doWaxWane=true
 phaseGroup=3
else
 phasename="Full Moon"
 phaseGroup=4
fi

if [ doWaxWane ] ; then
  yesterday=$( date -d "yesterday 13:00" '+%m/%d/%Y' )
  url="http://www.moongiant.com/phase/$yesterday"
  pattern="Illumination:"
  lastPhase="$( curl -s "$url" | grep "$pattern" | tr ',' '\
  ' | grep "$pattern" | sed 's/[^0-9]//g')"

  if [ $lastPhase -lt $phase ] ; then
    phasename="Waxing $phasename"
  else
    phasename="Waning $phasename"
    isWaning=true
  fi
fi

# Using the opposite unicode symbols, new moon for full moon and full moon
# for new moon and so on. This is because the script is intended for
# white-on-black color schemes
if [ $phaseGroup -eq 0 ] ; then
  printf "ðŸŒ•"
elif [ $phaseGroup -eq 4 ] ; then
  printf "ðŸŒ‘"
elif [ $isWaning ] ; then
  if [ $phaseGroup -eq 1 ] ; then
    printf "ðŸŒ–"
  elif [ $phaseGroup -eq 2 ] ; then
    printf "ðŸŒ—"
  elif [ $phaseGroup -eq 3 ] ; then
    printf "ðŸŒ˜"
  fi
else
  if [ $phaseGroup -eq 1 ] ; then
    printf "ðŸŒ’"
  elif [ $phaseGroup -eq 2 ] ; then
    printf "ðŸŒ“"
  elif [ $phaseGroup -eq 3 ] ; then
    printf "ðŸŒ”"
  fi
fi

printf " "

echo $phasename
